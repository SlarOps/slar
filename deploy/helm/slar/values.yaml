# Default values for SLAR Helm Chart
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Default replica count for components (can be overridden per component)
replicaCount: 1

# Default image settings
image:
  repository: ghcr.io/slarops/
  pullPolicy: IfNotPresent
  tag: ""

# Image pull secrets for private registries
imagePullSecrets: []

# Override chart name
nameOverride: ""
fullnameOverride: ""

# Service account configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod annotations
podAnnotations: {}

# Pod labels
podLabels: {}

# Pod security context
podSecurityContext: {}
  # fsGroup: 2000

# Container security context
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# Default service configuration
service:
  type: ClusterIP
  port: 80

# Ingress configuration
ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []

# Default resource limits
resources: {}
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Liveness and readiness probes
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# Autoscaling configuration
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes
volumes: []

# Additional volume mounts
volumeMounts: []

# Node selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity rules
affinity: {}

# Components configuration with persistent storage
components:
  ai:
    dockerEnabled: false
    replicas: 1
    image:
      tag: latest
      name: slar-ai
      pullPolicy: Always
    service:
      enabled: true
      type: ClusterIP
      port: 8002
    env:
      - name: PORT
        value: "8002"
      - name: OPENAI_API_KEY
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: openai-api-key
      - name: DATA_STORE
        value: "/data"
      - name: HF_HOME
        value: "/data/huggingface"
      - name: TRANSFORMERS_CACHE
        value: "/data/transformers"
      - name: SENTENCE_TRANSFORMERS_HOME
        value: "/data/sentence_transformers"
      - name: API_BASE_URL
        value: "http://slar-api.slar:8080"
      - name: TOKENIZERS_PARALLELISM
        value: "false"
      - name: ENABLE_KUBERNETES
        value: "true"
      - name: ENABLE_CODE_EXECUTOR
        value: "false"
      - name: OPENAI_MODEL
        value: "gpt-4o"
    # Persistent storage configuration
    persistence:
      enabled: true
      storageClass: ""  # Use default storage class, or specify like "gp2", "standard", etc.
      accessMode: ReadWriteOnce
      size: 10Gi  # Adjust size based on your needs
      mountPath: "/data"
    # Volume mounts for the container
    volumeMounts:
      - name: ai-data
        mountPath: /data
      - name: mcp-config
        mountPath: /app/mcp_config.yaml
        subPath: mcp_config.yaml
        readOnly: true
    # Volumes definition
    volumes:
      - name: ai-data
        persistentVolumeClaim:
          claimName: "{{ include \"slar.componentFullname\" (dict \"root\" . \"name\" \"ai\") }}-data"
      - name: mcp-config
        configMap:
          name: "{{ include \"slar.componentFullname\" (dict \"root\" . \"name\" \"ai\") }}-mcp-config"
    # MCP Configuration
    mcpConfig:
      enabled: true
      data: |
        "slar.advanced": {
          "mcpServers": [
            {
              "context7" : {
                "url": "https://mcp.context7.com/mcp"
              }
            }
          ]
        }

  terminal:
    image:
      name: slar-ai-terminal
      tag: latest
      pullPolicy: Always
    service:
      enabled: true
      type: ClusterIP
      port: 8003
    env:
      - name: PORT
        value: "8003"

  api:
    image:
      name: slar-api
      tag: latest
      pullPolicy: Always
    service:
      enabled: true
      type: ClusterIP
      port: 8080
    env:
      - name: PORT
        value: "8080"
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: database-url
      - name: SUPABASE_URL
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: supabase-url
      - name: SUPABASE_ANON_KEY
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: supabase-anon-key
      - name: SUPABASE_JWT_SECRET
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: supabase-jwt-secret
      - name: SLAR_ENV
        value: "production"

  worker:
    image:
      name: slar-api
      tag: latest
      pullPolicy: Always
    service:
      enabled: false
    command: ["./worker"]
    env:
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: database-url
      - name: POLL_INTERVAL
        value: "1"
      - name: BATCH_SIZE
        value: "10"
      - name: MAX_RETRIES
        value: "3"
      - name: LOG_LEVEL
        value: "DEBUG"
      - name: LOG_FILE
        value: "/app/worker.log"

  slack-worker:
    image:
      name: slar-slack-worker
      tag: latest
      pullPolicy: Always
    service:
      enabled: false
    env:
      - name: DATABASE_URL
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: database-url
      - name: SLACK_BOT_TOKEN
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: slack-bot-token
      - name: SLACK_APP_TOKEN
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: slack-app-token
      - name: API_BASE_URL
        value: "http://slar-api:8080"
      - name: POLL_INTERVAL
        value: "1"
      - name: BATCH_SIZE
        value: "10"
      - name: MAX_RETRIES
        value: "3"
      - name: LOG_LEVEL
        value: "DEBUG"
      - name: LOG_FILE
        value: "/app/slack_worker.log"

  web:
    image:
      name: slar-web
      tag: latest
      pullPolicy: Always
    service:
      enabled: true
      type: ClusterIP
      port: 3000
    env:
      - name: NEXT_PUBLIC_SUPABASE_URL
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: supabase-url
      - name: NEXT_PUBLIC_SUPABASE_ANON_KEY
        valueFrom:
          secretKeyRef:
            name: slar-secrets
            key: supabase-anon-key

  kong:
    ingress:
      enabled: true
      hosts:
        - host: slarhq.com
          paths:
            - path: /
              pathType: Prefix
    image:
      repository: kong
      tag: "2.8.1"
      pullPolicy: IfNotPresent
    service:
      enabled: true
      type: LoadBalancer
      port: 8000
      ports:
        - name: proxy
          port: 8000
          targetPort: 8000
          protocol: TCP
        - name: proxy-ssl
          port: 8443
          targetPort: 8443
          protocol: TCP
        - name: admin
          port: 8001
          targetPort: 8001
          protocol: TCP
    env:
      - name: KONG_DATABASE
        value: "off"
      - name: KONG_DECLARATIVE_CONFIG
        value: "/home/kong/kong.yml"
      - name: KONG_DNS_ORDER
        value: "LAST,A,CNAME"
      - name: KONG_PLUGINS
        value: "request-transformer,cors,key-auth,acl,basic-auth"
      - name: KONG_NGINX_PROXY_PROXY_BUFFER_SIZE
        value: "160k"
      - name: KONG_NGINX_PROXY_PROXY_BUFFERS
        value: "64 160k"
      - name: DASHBOARD_USERNAME
        value: "admin"
      - name: DASHBOARD_PASSWORD
        value: "admin"
    configMap:
      enabled: true
      name: kong-config
