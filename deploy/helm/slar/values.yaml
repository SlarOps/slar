# Default values for slar.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: nginx
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}


# Components mapped from docker-compose.yaml
components:
  ai:
    image:
      repository: ghcr.io/slarops/slar-ai
      tag: latest
      pullPolicy: IfNotPresent
    service:
      enabled: true
      type: ClusterIP
      port: 8002
    env:
      - name: PORT
        value: "8002"
      - name: OPENAI_API_KEY
        value: ""
    # ingress:
    #   enabled: false
    #   className: ""
    #   annotations: {}
    #   hosts:
    #     - host: ai.example.com
    #       paths:
    #         - path: /
    #           pathType: Prefix
    #   tls: []

  api:
    image:
      repository: ghcr.io/slarops/slar-api
      tag: latest
      pullPolicy: IfNotPresent
    service:
      enabled: true
      type: ClusterIP
      port: 8080
    env:
      - name: PORT
        value: "8080"
      - name: DATABASE_URL
        value: "postgres://postgres:postgres@db:5432/postgres?sslmode=disable"
      - name: SUPABASE_URL
        value: "http://localhost:8000"
      - name: SUPABASE_ANON_KEY
        value: ""
      - name: SUPABASE_JWT_SECRET
        value: ""

  worker:
    image:
      repository: ghcr.io/slarops/slar-api
      tag: latest
      pullPolicy: IfNotPresent
    service:
      enabled: false
    command: ["./worker"]
    env:
      - name: DATABASE_URL
        value: "postgres://postgres:postgres@db:5432/postgres?sslmode=disable"
      - name: SLACK_BOT_TOKEN
        value: ""
      - name: SLACK_APP_TOKEN
        value: ""
      - name: API_BASE_URL
        value: "http://slar-api:8080"
      - name: POLL_INTERVAL
        value: "1"
      - name: BATCH_SIZE
        value: "10"
      - name: MAX_RETRIES
        value: "3"
      - name: LOG_LEVEL
        value: "DEBUG"
      - name: LOG_FILE
        value: "/app/worker.log"

  slack-worker:
    image:
      repository: ghcr.io/slarops/slar-slack-worker
      tag: latest
      pullPolicy: IfNotPresent
    service:
      enabled: false
    env:
      - name: DATABASE_URL
        value: "postgres://postgres:postgres@db:5432/postgres?sslmode=disable"
      - name: SLACK_BOT_TOKEN
        value: ""
      - name: SLACK_APP_TOKEN
        value: ""
      - name: API_BASE_URL
        value: "http://slar-api:8080"
      - name: POLL_INTERVAL
        value: "1"
      - name: BATCH_SIZE
        value: "10"
      - name: MAX_RETRIES
        value: "3"
      - name: LOG_LEVEL
        value: "DEBUG"
      - name: LOG_FILE
        value: "/app/slack_worker.log"

  web:
    image:
      repository: ghcr.io/slarops/slar-web
      tag: latest
      pullPolicy: IfNotPresent
    service:
      enabled: true
      type: ClusterIP
      port: 3000
    env:
      - name: NEXT_PUBLIC_SUPABASE_URL
        value: "http://localhost:8000"
      - name: NEXT_PUBLIC_SUPABASE_ANON_KEY
        value: ""
      - name: NEXT_PUBLIC_API_URL
        value: "http://slar-api:8080"
      - name: NEXT_PUBLIC_WS_URL
        value: "ws://slar-ai:8002/ws/chat"
      - name: NEXT_PUBLIC_APP_NAME
        value: "SLAR"
      - name: NEXT_PUBLIC_APP_URL
        value: "http://localhost:3000"
      - name: NEXT_PUBLIC_AI_BASE_URL
        value: "http://slar-ai:8002"
    ingress:
      enabled: false
      className: ""
      annotations: {}
      hosts:
        - host: slar.example.com
          paths:
            - path: /
              pathType: Prefix
      tls: []
